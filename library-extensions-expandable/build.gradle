apply plugin: 'com.android.library'

group "com.mikepenz"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 3005
        versionName '3.0.0.5-SNAPSHOT'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    productFlavors {
    }
    lintOptions {
        abortOnError false
    }
}

if (project.hasProperty('pushall') || project.hasProperty('libraryextensionexpandablemonly')) {
    apply from: '../gradle-mvn-push.gradle'
    apply plugin: 'com.novoda.bintray-release'
    apply from: '../gradle-jcenter-push.gradle'
}

dependencies {
    compile project(':library')
    compile "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.robolectric:robolectric:3.1.1'
    testCompile 'org.robolectric:robolectric-utils:3.1.1'
    testCompile 'org.robolectric:shadows-core:3.1.1'
    testCompile 'org.robolectric:shadows-support-v4:3.1.1'
    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
    testCompile 'com.squareup.assertj:assertj-android-design:1.1.1@aar'
    testCompile 'com.squareup.assertj:assertj-android-appcompat-v7:1.1.1@aar'
    testCompile("com.squareup.assertj:assertj-android-support-v4:1.1.1@aar") {
        exclude group: "com.android.support", module: "support-annotations"
        exclude group: "com.android.support", module: "support-v4"
    }
}


tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "short"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
